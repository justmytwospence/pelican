<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>justmytwospence</title><link href="http://justmytwospence.github.com/pelican/" rel="alternate"></link><link href="http://justmytwospence.github.com/pelican/feeds/web.atom.xml" rel="self"></link><id>http://justmytwospence.github.com/pelican/</id><updated>2014-01-12T17:53:00+01:00</updated><entry><title>Scheduling tasks in the cloud with EC2Â APIs</title><link href="http://justmytwospence.github.com/pelican/ec2-apis.html" rel="alternate"></link><updated>2014-01-12T17:53:00+01:00</updated><author><name>justmytwospence</name></author><id>tag:justmytwospence.github.com/pelican,2014-01-12:ec2-apis.html</id><summary type="html">&lt;p&gt;[dropcap]T[/dropcap]his post is sort of an addendum to our &lt;a href="http://www.spencerboucher.com/live-mapping/" title="Live mapping"&gt;live-mapping
project&lt;/a&gt;, but it should also be of use to anyone looking to run an
arbitrary script on a recurring schedule. Originally, we set up a 24/7
instance on &lt;a href="http://aws.amazon.com/ec2/"&gt;Amazon&amp;#8217;s Elastic Compute Cloud&lt;/a&gt; that ran a daily &lt;code&gt;cron&lt;/code&gt;
job. This works, but its a bit wasteful because we&amp;#8217;re paying for 24
hours of cloud even though we&amp;#8217;re only actually using it for maybe 5
minutes a&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;Fortunately, Amazon provides a &lt;a href="http://aws.amazon.com/developertools/"&gt;schmorgesborg&lt;/a&gt; of command line
interface (&lt;span class="caps"&gt;CLI&lt;/span&gt;) tools that allow us to manage our cloud instances more
efficiently. Specifically, we want to schedule an instance to spin up
only once a day, execute our script, then shut back down. To accomplish
this, we will want three &lt;span class="caps"&gt;CLI&lt;/span&gt; tools: &lt;a href="http://aws.amazon.com/developertools/368"&gt;the Amazon &lt;span class="caps"&gt;EC2&lt;/span&gt; &lt;span class="caps"&gt;AMI&lt;/span&gt; Tools&lt;/a&gt;, &lt;a href="http://aws.amazon.com/developertools/351"&gt;the
Amazon &lt;span class="caps"&gt;EC2&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; Tools&lt;/a&gt;,and &lt;a href="http://aws.amazon.com/developertools/2535"&gt;the Auto Scaling Command Line Tool&lt;/a&gt;. If
you&amp;#8217;re on a Mac, it&amp;#8217;s way easier to get these with &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; than by
downloading from Amazon&amp;#8217;s&amp;nbsp;website:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Go go gadget EC2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ami&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;creating&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;AMI&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;existing&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;registering&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;launching&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;creating&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;scaling&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;defining&lt;/span&gt; &lt;span class="n"&gt;schedules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an extra Homebrew bonus, running &lt;code&gt;brew info ec2-ami-tools&lt;/code&gt;,
&lt;code&gt;brew info ec2-api-tools&lt;/code&gt;, and &lt;code&gt;brew info aws-as&lt;/code&gt; will now tell us
exactly what we need to do to get our authentication and environment
variables all set up. First we are told to download the necessary .pem
files from &lt;a href="http://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key"&gt;this Amazon page&lt;/a&gt; and place them into a new hidden
directory of our home directory &amp;#8220;\~/.ec2&amp;#8221;. Then we tell our command line
where everything lives now by inserting the following lines into our&amp;nbsp;\~/.bashrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{.line-height:20 .toolbar-overlay:false .nums:false .nums-toggle:false .lang:sh .decode:true title=&amp;quot;Setting environment variables&amp;quot;}
export EC2_PRIVATE_KEY=&amp;quot;$(/bin/ls &amp;quot;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&amp;quot;/.ec2/pk-*.pem | /usr/bin/head -1)&amp;quot;
export EC2_CERT=&amp;quot;$(/bin/ls &amp;quot;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&amp;quot;/.ec2/cert-*.pem | /usr/bin/head -1)&amp;quot;
export EC2_HOME=&amp;quot;/usr/local/Cellar/ec2-api-tools/1.6.12.0/libexec&amp;quot;
export AWS_AUTO_SCALING_HOME=&amp;quot;/usr/local/Cellar/auto-scaling/1.0.61.4/libexec&amp;quot;
export EC2_AMITOOL_HOME=&amp;quot;/usr/local/Cellar/ec2-ami-tools/1.4.0.9/libexec&amp;quot;
export EC2_REGION=&amp;quot;us-west-2&amp;quot;
export EC2_ZONE=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;EC2_REGION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;a
export EC2_URL=https://&lt;span class="nv"&gt;$EC2_REGION.ec2.amazonaws.com&lt;/span&gt;
export AWS_AUTO_SCALING_URL=https://autoscaling.&lt;span class="nv"&gt;$EC2_REGION.amazonaws.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Its pretty simple, but if you have any trouble with this part, refer to
the official &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html"&gt;Amazon documentation for setting up the command line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[column size=&amp;#8221;one-half&amp;#8221;]&lt;br /&gt;
Because these environment variables are recognized out of the box by
the &lt;span class="caps"&gt;CLI&lt;/span&gt; tools, we won&amp;#8217;t need to point to our authentication keys or
specify a region every time we make an &lt;span class="caps"&gt;API&lt;/span&gt; call and our next commands
will be much more succinct. Note that every &lt;span class="caps"&gt;EC2&lt;/span&gt; instance is physically
located at one of several regions; we are using us-west-2 because it
happens to be where I spun up the existing instance that currently holds
our &amp;#8220;update.py&amp;#8221; script, but any of them would probably work just fine
for the simple job at hand.&lt;br /&gt;&amp;nbsp;[/column]&lt;/p&gt;
&lt;p&gt;[column size=&amp;#8221;one-half&amp;#8221;&amp;nbsp;last=&amp;#8221;true&amp;#8221;]&lt;/p&gt;
&lt;p&gt;Code&amp;nbsp;Region&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;ap-northeast-1   Asia Pacific (Tokyo) Region
  ap-southeast-1   Asia Pacific (Singapore) Region
  ap-southeast-2   Asia Pacific (Sydney) Region
  eu-west-1        &lt;span class="caps"&gt;EU&lt;/span&gt; (Ireland) Region
  sa-east-1        South America (Sao Paulo) Region
  us-east-1        &lt;span class="caps"&gt;US&lt;/span&gt; East (Northern Virginia) Region
  us-west-1        &lt;span class="caps"&gt;US&lt;/span&gt; West (Northern California) Region
  us-west-2        &lt;span class="caps"&gt;US&lt;/span&gt; West (Oregon)&amp;nbsp;Region&lt;/p&gt;
&lt;p&gt;[/column]&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;[dropcap]1[/dropcap]So, first things first. We can&amp;#8217;t just spin up an
off-the-rack &lt;span class="caps"&gt;EC2&lt;/span&gt; instance every day, because we&amp;#8217;ll run into the same
problem that I originally had with my web host: the Python modules that
we need won&amp;#8217;t be installed. We &lt;em&gt;could&lt;/em&gt; write a script that would install
&lt;code&gt;pip&lt;/code&gt; plus all of the requisite Python modules and run it first thing
after we launch the instance, but there&amp;#8217;s a better&amp;nbsp;way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating our very own AMI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;8918e1&lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Map Update Image&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command from &lt;code&gt;ec2-ami-tools&lt;/code&gt; creates an &amp;#8220;Amazon Machine Image&amp;#8221; of
the instance that we previously had running and names it &amp;#8220;Map Update
Image&amp;#8221;. A new image &lt;span class="caps"&gt;ID&lt;/span&gt; will now print to your console, &lt;code&gt;ami-fcdfb9cc&lt;/code&gt; in
my case. This is tantamount to cloning the instance, because we can now
reference the new image &lt;span class="caps"&gt;ID&lt;/span&gt; when we spin up new instances and all of our
modules, scripts, etc. will be there waiting for us. Note that I removed
the instance&amp;#8217;s &lt;code&gt;cron&lt;/code&gt; job &lt;em&gt;before&lt;/em&gt; creating the &lt;span class="caps"&gt;AMI&lt;/span&gt;, because we&amp;#8217;ll now
be handling the task scheduling from &lt;emph&gt;outside&lt;/emph&gt; the instance,
via &lt;strong&gt;autoscaling&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;[dropcap]2[/dropcap]Next let&amp;#8217;s write a shell script that will execute
our Python map-updating script, shoot us a diagnostic email, then shut
down the instance that its running on. The idea here is that once a day
we&amp;#8217;re going to spin up an instance using our shiny new &lt;span class="caps"&gt;AMI&lt;/span&gt; and
immediately run this new script (let&amp;#8217;s call it &amp;#8220;update.sh&amp;#8221;) that will do
its business and then promptly commit seppuku and stop charging us
money. Eric Hammond has created a great template on &lt;a href="http://alestic.com/2011/11/ec2-schedule-instance"&gt;his blog&lt;/a&gt;, which
I&amp;#8217;ve modified below. Note the execution of our &lt;a href="http://www.spencerboucher.com/live-mapping/" title="Live mapping"&gt;familiar&lt;/a&gt; &amp;#8220;update.py&amp;#8221; script highlighted on line 4, and the apoptosis
command on line&amp;nbsp;46:&lt;/p&gt;
&lt;p&gt;~~~~ {.lang:sh .mark:4,44-46 .decode:true&amp;nbsp;title=&amp;#8221;update.sh&amp;#8221;}&lt;/p&gt;
&lt;h1&gt;!/bin/bash&amp;nbsp;-x&lt;/h1&gt;
&lt;p&gt;exec &amp;gt; &amp;gt;(tee /var/log/user-data.log|logger -t user-data -s 2&amp;gt;/dev/console)&amp;nbsp;2&amp;gt;&amp;amp;1&lt;/p&gt;
&lt;p&gt;/usr/bin/python /home/ubuntu/update.py # Run the&amp;nbsp;script&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;EMAIL&lt;/span&gt;=spencer.g.boucher@gmail.com&lt;/p&gt;
&lt;h1&gt;Upgrade and install Postfix so we can send a sample&amp;nbsp;email&lt;/h1&gt;
&lt;p&gt;export DEBIAN_FRONTEND=noninteractive
apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get install -y&amp;nbsp;postfix&lt;/p&gt;
&lt;h1&gt;Get some information about the running&amp;nbsp;instance&lt;/h1&gt;
&lt;p&gt;instance_id=$(wget -qO- instance-data/latest/meta-data/instance-id)
public_ip=$(wget -qO- instance-data/latest/meta-data/public-ipv4)
zone=$(wget -qO- instance-data/latest/meta-data/placement/availability-zone)
region=$(expr match $zone &amp;#8216;(.*).&amp;#8217;)&amp;nbsp;uptime=$(uptime)&lt;/p&gt;
&lt;h1&gt;Send status&amp;nbsp;email&lt;/h1&gt;
&lt;p&gt;/usr/sbin/sendmail -oi -t -f $&lt;span class="caps"&gt;EMAIL&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class="caps"&gt;EOM&lt;/span&gt;
From: $&lt;span class="caps"&gt;EMAIL&lt;/span&gt;
To: $&lt;span class="caps"&gt;EMAIL&lt;/span&gt;
Subject: Results of &lt;span class="caps"&gt;EC2&lt;/span&gt; scheduled&amp;nbsp;script&lt;/p&gt;
&lt;p&gt;This email message was generated on the following &lt;span class="caps"&gt;EC2&lt;/span&gt;&amp;nbsp;instance:&lt;/p&gt;
&lt;p&gt;instance id: $instance_id
  region:      $region
  public ip:   $public_ip
  uptime:&amp;nbsp;$uptime&lt;/p&gt;
&lt;p&gt;If the instance is still running, you can monitor the output of this
job using a command&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;ssh ubuntu@$public_ip tail -1000f&amp;nbsp;/var/log/user-data.log&lt;/p&gt;
&lt;p&gt;ec2-describe-instances &amp;#8212;region $region&amp;nbsp;$instance_id&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;EOM&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;Give the script and email some time to do their&amp;nbsp;thing&lt;/h1&gt;
&lt;p&gt;sleep 600 # 10&amp;nbsp;minutes&lt;/p&gt;
&lt;h1&gt;This will stop the &lt;span class="caps"&gt;EBS&lt;/span&gt; boot instance, stopping the hourly&amp;nbsp;charges.&lt;/h1&gt;
&lt;h1&gt;Have Auto Scaling terminate it, stopping the storage&amp;nbsp;charges.&lt;/h1&gt;
&lt;p&gt;shutdown -h&amp;nbsp;now&lt;/p&gt;
&lt;p&gt;exit&amp;nbsp;0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;Note&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;user&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt; &lt;span class="nb"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nb"&gt;pass&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;launch&lt;/span&gt; &lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="nx"&gt;executes&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;emph&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;emph&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;user&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;typically&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;via&lt;/span&gt; &lt;span class="sb"&gt;`ssh`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Its&lt;/span&gt; &lt;span class="nx"&gt;probably&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt;
&lt;span class="nx"&gt;explicit&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;possible&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;specifying&lt;/span&gt; &lt;span class="nb"&gt;path&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;cloud&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;tilde&lt;/span&gt;
&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="nx"&gt;might&lt;/span&gt; &lt;span class="nx"&gt;turn&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;bite&lt;/span&gt; &lt;span class="nx"&gt;you.&lt;/span&gt;

&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dropcap&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;3&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;dropcap&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;Now we need to create **launch configuration** that
will basically do all the button-pushing that we would normally be doing
at the AWS console GUI. Here we specify:

-   &amp;quot;Micro&amp;quot; as our instance type.
-   Our shell script &amp;quot;update.sh&amp;quot; from step 2 as the &amp;quot;user-data-file&amp;quot;.
    User data files are passed into the instance and executed
    immediately when supplied in the launch configuration. They must be
    less than 16kb as I suppose they are stored on some ancillary server
    somewhere.
-   The AMI image that we cloned in step 1 from the instance that
    included our Python modules.
-   The name of the launch config; let&amp;#39;s call it
    &amp;quot;map-update-launch-config&amp;quot;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{.line-height:20 .toolbar-overlay:false .nums:false .nums-toggle:false .lang:sh .decode:true title=&amp;#8221;Create launch configuration&amp;#8221;}
as-create-launch-config &lt;br /&gt;
   &amp;#8212;instance-type t1.micro &lt;br /&gt;
   &amp;#8212;user-data-file ~/Desktop/update.sh &lt;br /&gt;
   &amp;#8212;image-id ami-fcdfb9cc &lt;br /&gt;
   &amp;#8212;launch-config &amp;#8220;map-update-launch-config&amp;#8221;
as-describe-launch-configs&amp;nbsp;&amp;#8212;headers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Note&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;provides&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;launch&lt;/span&gt;
&lt;span class="n"&gt;configurations&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dropcap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dropcap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;scaling&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;These&lt;/span&gt;
&lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;typically&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;
&lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;schedule&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;heavy&lt;/span&gt; &lt;span class="n"&gt;traffic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;schedule&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;flick&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
&lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;scaling&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map-update-scale-group&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;launch&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map-update-launch-config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;Which&lt;/span&gt; &lt;span class="n"&gt;availability&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basically&lt;/span&gt; &lt;span class="n"&gt;irrelevant&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;
    &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;EC2_ZONE&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;earlier&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zones&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;provides&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt;
    &lt;span class="n"&gt;zones&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt;
    &lt;span class="n"&gt;initialize&lt;/span&gt; &lt;span class="n"&gt;these&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{.line-height:20 .toolbar-overlay:false .nums:false .nums-toggle:false .lang:sh .decode:true title=&amp;#8221;Create auto scaling group with launch configuration&amp;#8221;}
as-create-auto-scaling-group &lt;br /&gt;
   &amp;#8212;auto-scaling-group &amp;#8220;map-update-scale-group&amp;#8221; &lt;br /&gt;
   &amp;#8212;launch-configuration &amp;#8220;map-update-launch-config&amp;#8221; &lt;br /&gt;
   &amp;#8212;availability-zones &amp;#8220;$EC2_ZONE&amp;#8221; &lt;br /&gt;
   &amp;#8212;min-size 0 &amp;#8212;max-size 0
as-suspend-processes &amp;#8220;map-update-scale-group&amp;#8221; &lt;br /&gt;
   &amp;#8212;processes ReplaceUnhealthy
as-describe-auto-scaling-groups&amp;nbsp;&amp;#8212;headers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;In&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;second&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="sb"&gt;`as-suspend-processes`&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;prevent&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s default behavior which is to attempt to restart after it is&lt;/span&gt;
&lt;span class="s1"&gt;shut down. The third line provides a list of all the auto scaling groups&lt;/span&gt;
&lt;span class="s1"&gt;that have been created.&lt;/span&gt;

&lt;span class="s1"&gt;[hr]&lt;/span&gt;

&lt;span class="s1"&gt;[dropcap]5[/dropcap]Last but not least, we are ready to assign a&lt;/span&gt;
&lt;span class="s1"&gt;schedule to our auto scaling group. Here we create two: one to start the&lt;/span&gt;
&lt;span class="s1"&gt;instance and one to terminate the instance. Astute readers will recall&lt;/span&gt;
&lt;span class="s1"&gt;that &amp;quot;update.sh&amp;quot; already &amp;lt;emph&amp;gt;stops&amp;lt;/emph&amp;gt; the instance so that we&lt;/span&gt;
&lt;span class="s1"&gt;aren&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;paying&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nb"&gt;running&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;also&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;completely&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;emph&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;emph&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;aren&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t paying to store&lt;/span&gt;
&lt;span class="s1"&gt;information about it. Each schedule requires:&lt;/span&gt;

&lt;span class="s1"&gt;-   A name (&amp;quot;map-update-start&amp;quot; &amp;amp; &amp;quot;map-update-stop&amp;quot;).&lt;/span&gt;
&lt;span class="s1"&gt;-   The name of the auto scaling group we created in step 4&lt;/span&gt;
&lt;span class="s1"&gt;    (&amp;quot;map-update-scale-group&amp;quot;).&lt;/span&gt;
&lt;span class="s1"&gt;-   How we want to scale. By setting both `min-size` and `max-size` to&lt;/span&gt;
&lt;span class="s1"&gt;    1, we are effectively turning on one instance. We later effectively&lt;/span&gt;
&lt;span class="s1"&gt;    turn that instance back off by setting both to 0.&lt;/span&gt;
&lt;span class="s1"&gt;-   A &amp;quot;recurrence,&amp;quot; ie when to occur. This flag uses the same syntax&lt;/span&gt;
&lt;span class="s1"&gt;    that `cron` does. Here we set the instance to launch at midnight UTC&lt;/span&gt;
&lt;span class="s1"&gt;    (`0 0 * * *`), and terminate 15 minutes later (`15 0 * * *`). Recall&lt;/span&gt;
&lt;span class="s1"&gt;    that our script already stops the instance 10 minutes after&lt;/span&gt;
&lt;span class="s1"&gt;    execution, so 15 minutes is playing it safe.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{.line-height:20 .toolbar-overlay:false .nums:false .nums-toggle:false .lang:sh .decode:true title=&amp;#8221;Create schedule for auto scaling group&amp;#8221;}
as-put-scheduled-update-group-action &lt;br /&gt;
   &amp;#8212;name &amp;#8220;map-update-start&amp;#8221; &lt;br /&gt;
   &amp;#8212;auto-scaling-group &amp;#8220;map-update-scale-group&amp;#8221; &lt;br /&gt;
   &amp;#8212;min-size 1 &amp;#8212;max-size 1 &lt;br /&gt;
   &amp;#8212;recurrence &amp;#8220;0 0 * &lt;em&gt; &lt;/em&gt;&amp;#8221;
as-put-scheduled-update-group-action &lt;br /&gt;
   &amp;#8212;name &amp;#8220;map-update-stop&amp;#8221; &lt;br /&gt;
   &amp;#8212;auto-scaling-group &amp;#8220;map-update-scale-group&amp;#8221; &lt;br /&gt;
   &amp;#8212;min-size 0 &amp;#8212;max-size 0 &lt;br /&gt;
   &amp;#8212;recurrence &amp;#8220;15 0 * &lt;em&gt; &lt;/em&gt;&amp;#8221;
as-describe-scheduled-actions &amp;#8212;headers&amp;nbsp;~~~~&lt;/p&gt;
&lt;p&gt;As before, the third line provides a list of the actions that have been&amp;nbsp;scheduled.&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;And thats it! We are now only paying for 10 or 15 minutes of cloud per
day, as opposed to 1,440 of them. To review the timeline we have created
in this example: our auto scaling group boots up an instance up at
midnight &lt;span class="caps"&gt;UTC&lt;/span&gt; that immediately executes &amp;#8220;update.sh&amp;#8221;. This automatically
executes &amp;#8220;update.py&amp;#8221; and shoots us a diagnostic email. It then waits 10
minutes to make sure everything has time to run, before stopping the
instance. 5 minutes after &lt;emph&gt;that&lt;/emph&gt; the auto scaling group then
completely terminates the&amp;nbsp;instance.&lt;/p&gt;
&lt;p&gt;Other great&amp;nbsp;resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/schedule_time.html"&gt;Official Amazon documentation for scheduling auto scaling&amp;nbsp;groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alestic.com/2011/11/ec2-schedule-instance"&gt;Running &lt;span class="caps"&gt;EC2&lt;/span&gt; Instances on a Recurring Schedule with Auto&amp;nbsp;Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.robertsindall.co.uk/blog/how-to-use-amazons-auto-scaling-groups/"&gt;Summary of &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cardinalpath.com/autoscaling-your-website-with-amazon-web-services-part-2/"&gt;Auto Scaling Your Website with Amazon Web&amp;nbsp;Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="api"></category><category term="auto scaling"></category><category term="aws"></category><category term="cloud"></category><category term="cron"></category><category term="ec2"></category></entry><entry><title>LiveÂ mapping</title><link href="http://justmytwospence.github.com/pelican/live-mapping.html" rel="alternate"></link><updated>2014-01-08T08:50:00+01:00</updated><author><name>justmytwospence</name></author><id>tag:justmytwospence.github.com/pelican,2014-01-08:live-mapping.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been wanting to do some more mapping stuff since
my first encounter with Leaflet a month or two ago while I was working
on a project for &lt;a href="http://auto-grid.com"&gt;AutoGrid&lt;/a&gt;. I had my eye on CartoDB&amp;#8217;s time series
library, &lt;a href="https://github.com/cartodb/torque"&gt;Torque&lt;/a&gt;, because I had really wanted to do some time-series
visualization, but time constraints and privacy issues with uploading
data to CartoDB&amp;#8217;s servers prevented me from really exploring. Since I
had a few days of free time over winter break, I played around with it a
bit and came up with this: &lt;a href="http://www.spencerboucher.com/map"&gt;spencerboucher.com/map&lt;/a&gt;. How&amp;#8217;d I do&amp;nbsp;it?&lt;/p&gt;
&lt;p&gt;First I needed some geographic data, so I turned to a source of data
I&amp;#8217;ve been collected for almost a year - my own location. &lt;a href="http://openpaths.cc"&gt;OpenPaths&lt;/a&gt;
is a mobile app that records your location at regular time intervals. I
opted for every 30 minutes at first, then upped it to every 15 minutes
when I discovered that the effect on battery life wasn&amp;#8217;t nearly as bad
as I expected it to be. OpenPaths is a project of &lt;a href="http://nytlabs.com/"&gt;the R&amp;amp;D department at
The New York Times&lt;/a&gt; and they &lt;a href="https://openpaths.cc/FAQ"&gt;claim&lt;/a&gt; that you are the only one with
access to the collected data. Interestingly, you can grant various
&lt;a href="https://openpaths.cc/projects"&gt;research programs&lt;/a&gt; access to your data at your own discretion. Your
data is conveniently downloadable as a csv, json, or kml file, so I
easily pulled my dataset of \~3,000 time points since December 2012.
Unfortunately, I made the switch from iPhone to Android around April
(well, that part is fortunate), and forgot to re-download the app, so I
only really have data from the around the first three months and last
two months of&amp;nbsp;2013.&lt;/p&gt;
&lt;p&gt;Turns out, making impressive maps with CartoDB is almost embarrassingly
easy. Their &lt;span class="caps"&gt;GUI&lt;/span&gt; is pretty intuitive and running queries on their
postgreSQL database is simple. Even time series stuff built on the
Torque backend is really just point and click. I decided that the best
way to visualize this data was with an aggregated hexbin heatmap of all
my past locations, overlaid with a point-by-point replay with a
time-slider. From there, it was just a one-line &lt;span class="caps"&gt;API&lt;/span&gt; call to host the map
on my website (line 30 highlighted below), which is significantly easier
than the legwork that went into crafting a Leaflet map&amp;nbsp;&amp;#8220;manually.&amp;#8221;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xhtml&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Map source code&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is pretty awesome, but in light of how easy
it all was, I was almost disappointed. Can we take it one step further?
Let&amp;#8217;s put on our &lt;a href="http://quantifiedself.com/about/"&gt;Quantified Self&lt;/a&gt; hats and set about to make this map
&lt;em&gt;live&lt;/em&gt;. There&amp;#8217;s three components to making this happen, so we&amp;#8217;ll step
through them one at a time. First we need to access the most recent data
from OpenPaths (there&amp;#8217;s an &lt;span class="caps"&gt;API&lt;/span&gt; for that!), and then we need to insert
that data into CartoDB&amp;#8217;s database (guess what, there&amp;#8217;s an &lt;span class="caps"&gt;API&lt;/span&gt; for that
too). Last but not least, we need to schedule that data transplant to
occur on a regular basis. The Unix utility &lt;code&gt;cron&lt;/code&gt; is the canonical tool
for this type of thing, so this seemed like a good time to learn how to
use&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Python has a reputation for being a great &amp;#8220;glue&amp;#8221; language, so that&amp;#8217;s
what we&amp;#8217;ll use to build this
script.
&lt;br&gt;
Programmatically accessing your data from
OpenPaths is super simple. This piece of our script is pulled more or
less verbatim from &lt;a href="https://openpaths.cc/api"&gt;the OpenPaths &lt;span class="caps"&gt;API&lt;/span&gt; documentation&lt;/a&gt;. Line 21
(highlighted below) is key - this is where we specify which data you
want to pull for injection into the CartoDB database. Here we will grab
the last 24 hours of data (\~96 readings, if you&amp;#8217;re collecting every 15
minutes like me), getting the results in a nice &lt;span class="caps"&gt;JSON&lt;/span&gt;-formatted variable
named &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;:::python
  import oauth2, time, urllib, urllib2,&amp;nbsp;json&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;ACCESS&lt;/span&gt; = &amp;#8216;redacted&amp;#8217;
  &lt;span class="caps"&gt;SECRET&lt;/span&gt; = &amp;#8216;redacted&amp;#8217;
  &lt;span class="caps"&gt;URL&lt;/span&gt; =&amp;nbsp;&amp;#8216;https://openpaths.cc/api/1&amp;#8217;&lt;/p&gt;
&lt;p&gt;def build_auth_header(url, method):
      params = {                                          &lt;br /&gt;
          &amp;#8216;oauth_version&amp;#8217;: &amp;#8220;1.0&amp;#8221;,
          &amp;#8216;oauth_nonce&amp;#8217;: oauth2.generate_nonce(),
          &amp;#8216;oauth_timestamp&amp;#8217;: int(time.time()),
      }
      consumer = oauth2.Consumer(key=&lt;span class="caps"&gt;ACCESS&lt;/span&gt;, secret=&lt;span class="caps"&gt;SECRET&lt;/span&gt;)
      params[&amp;#8216;oauth_consumer_key&amp;#8217;] = consumer.key 
      request = oauth2.Request(method=method, url=url, parameters=params)  &lt;br /&gt;
      signature_method = oauth2.SignatureMethod_HMAC_SHA1()
      request.sign_request(signature_method, consumer, None)
      return&amp;nbsp;request.to_header()&lt;/p&gt;
&lt;p&gt;now = time.time()
  params = {&amp;#8216;start_time&amp;#8217;: now - 24&lt;em&gt;60&lt;/em&gt;60, &amp;#8216;end_time&amp;#8217;: now} # get the last 24 hours
  query = &amp;#8220;%s?%s&amp;#8221; % (&lt;span class="caps"&gt;URL&lt;/span&gt;, urllib.urlencode(params))
  #print(query)
  try:
      request = urllib2.Request(query)
      request.headers = build_auth_header(&lt;span class="caps"&gt;URL&lt;/span&gt;, &amp;#8216;&lt;span class="caps"&gt;GET&lt;/span&gt;&amp;#8217;)
      connection = urllib2.urlopen(request)
      data = json.loads(&amp;#8221;.join(connection.readlines()))
      print(json.dumps(data, indent=4))
  except urllib2.HTTPError as e:
      print(e.read())
&lt;br&gt;
Now we need to get our new &lt;code&gt;data&lt;/code&gt; variable into
CartoDB&amp;#8217;s postgreSQL server. &lt;a href="http://developers.cartodb.com/documentation/sql-api.html"&gt;CartoDB&amp;#8217;s &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; documentation&lt;/a&gt; makes
this possible, and there&amp;#8217;s even a &lt;a href="https://github.com/vizzuality/cartodb-python"&gt;python module&lt;/a&gt; that wraps OAuth2 to
simplify things. Although its still in the early stages of development,
this module works fine for our current purposes; all we have to do is
send it a string that holds the &lt;span class="caps"&gt;SQL&lt;/span&gt; query we want to run. So now we&amp;#8217;ll
just write a for-loop that successively builds an &lt;code&gt;INSERT&lt;/code&gt; query for
each element in &lt;code&gt;data&lt;/code&gt; (lines 18-20 highlighted&amp;nbsp;below).&lt;/p&gt;
&lt;p&gt;:::python
  from cartodb import CartoDBException,&amp;nbsp;CartoDBAPIKey&lt;/p&gt;
&lt;p&gt;user =  &amp;#8216;spencer.g.boucher@gmail.com&amp;#8217;
  password =  &amp;#8216;redacted&amp;#8217;
  cartodb_domain = &amp;#8216;justmytwospence&amp;#8217;
  API_KEY =&amp;#8217;redacted&amp;#8217;
  cl = CartoDBAPIKey(API_KEY,&amp;nbsp;cartodb_domain)&lt;/p&gt;
&lt;p&gt;for reading in data:
      alt     = str(reading[&amp;#8216;alt&amp;#8217;])
      device  =     reading[&amp;#8216;device&amp;#8217;]
      lat     = str(reading[&amp;#8216;lat&amp;#8217;])
      lon     = str(reading[&amp;#8216;lon&amp;#8217;])
      os      =     reading[&amp;#8216;os&amp;#8217;]
      t       = str(reading[&amp;#8216;t&amp;#8217;])
      version =     reading[&amp;#8216;version&amp;#8217;]
      try:
          query_string = &amp;#8220;&lt;span class="caps"&gt;INSERT&lt;/span&gt; &lt;span class="caps"&gt;INTO&lt;/span&gt; openpaths_justmytwospence (alt, date, device, lat,  lon, os, version, the_geom) &amp;#8221;
                         &amp;#8220;&lt;span class="caps"&gt;VALUES&lt;/span&gt; ({0}, abstime({1}), &amp;#8216;{2}&amp;#8217;, {3}, {4}, &amp;#8216;{5}&amp;#8217;, &amp;#8216;{6}&amp;#8217;, ST_ SetSRID(ST_Point({4}, {3}), 4326))&amp;#8221;&lt;br /&gt;
                        .format(alt, t, device, lat, lon, os, version)
          print cl.sql(query_string)
      except CartoDBException as e:
          print (&amp;#8220;some error ocurred&amp;#8221;,&amp;nbsp;e)&lt;/p&gt;
&lt;p&gt;A few&amp;nbsp;notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It would certainly be faster to insert all of the new data into the
    database using a single &lt;code&gt;INSERT&lt;/code&gt; statement, but that would require
    some more tedious text parsing and execution speed isn&amp;#8217;t
    particularly important to us. As it stands, it takes about six
    seconds to post a day&amp;#8217;s worth of&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;One posgreSQL &amp;#8220;gotcha&amp;#8221; had me hung up for quite some time: single
    quotes parse fine but double quotes do&amp;nbsp;not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_SetSRID&lt;/code&gt; is a &lt;a href="http://postgis.org/docs/ST_SetSRID.html"&gt;PostGIS command&lt;/a&gt; that converts a lon/lat pair
    (in that order - another &amp;#8220;gotcha&amp;#8221;) to the necessary geometry&amp;nbsp;object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
Last but not least, we need this script to run
automatically. Because we&amp;#8217;ve written the script to transplant 24 hours
of data, we&amp;#8217;ll need to run it once a day in order to capture all of the
data that&amp;#8217;s being generated. I tried to set up my web host,
&lt;a href="https://laughingsquid.us/"&gt;LaughingSquid&lt;/a&gt;, to do this, but unfortunately they don&amp;#8217;t grant shell
access so we can&amp;#8217;t install all those fancy python modules that we&amp;#8217;ve
already used. Its totally possible to rewrite the script to use only
modules from the &lt;a href="http://docs.python.org/2/library/"&gt;Python Standard Library&lt;/a&gt;, but this would turn a
simple task into a tedious one. Manually implementing OAuth in
particular would be a total pain in the rear, and classes are just about
to resume after all, so a different solution is in order. Let&amp;#8217;s spin up
a &lt;a href="http://aws.amazon.com/"&gt;&amp;#8220;micro&amp;#8221; &lt;span class="caps"&gt;EC2&lt;/span&gt; instance&lt;/a&gt; instead. This gives us free reign to install
whatever we need for the low low cost of Â¢.02 per hour. This does start
to add up, but our Master&amp;#8217;s program gives us some pretty substantial
Amazon Web Services credit that goes mostly unused, so we aren&amp;#8217;t too
upset :). &lt;span class="caps"&gt;UPDATE&lt;/span&gt;: A new post provides details about how to schedule
Amazon &lt;span class="caps"&gt;EC2&lt;/span&gt; instances - &lt;a href="http://www.spencerboucher.com/ec2-apis/"&gt;http://www.spencerboucher.com/ec2-apis/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After &lt;code&gt;pip install&lt;/code&gt;ing everything we need and &lt;code&gt;scp&lt;/code&gt;ing our python script
(let&amp;#8217;s call it update.py) into the home directory of our remote server,
all we need to do is set up a crontab with the &lt;code&gt;crontab -e&lt;/code&gt; command and
add the following&amp;nbsp;line:&lt;/p&gt;
&lt;p&gt;:::bash
  @daily /usr/bin/python&amp;nbsp;~/update.py&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@daily&lt;/code&gt; is actually a shortcut for &lt;code&gt;* * * * *&lt;/code&gt;, where each asterix is a
placeholder for the (respectively) minute, hour, day of month, month,
and day of week that the script should executed. This shortcut defaults
to midnight every day, which is really as good as anything for our&amp;nbsp;purposes.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;VoilÃ ! Now we can step back and relax, knowing that we don&amp;#8217;t have to do
a single thing and our map will continue to show the most up-to-date
data available. A few final&amp;nbsp;notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We might reasonably want to lag our script by a week or so, for
    security/privacy&amp;nbsp;reasons.&lt;/li&gt;
&lt;li&gt;As far as I can tell, the location readings are recorded in a [&lt;span class="caps"&gt;POSIX&lt;/span&gt;
    time][] and have not been adjusted by time zone, so they are still
    in the &lt;a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time"&gt;&lt;span class="caps"&gt;UTC&lt;/span&gt;&lt;/a&gt; time zone. This means that they are 8 hours off from
    the actual time in California, where I usually am. This doesn&amp;#8217;t
    bother me too much at the moment because the visualization is still
    relatively low resolution in the time domain anyways. At some point
    I might implement the relevant transformation, but this will raise
    its own issues because I won&amp;#8217;t &lt;em&gt;always&lt;/em&gt; be in California, not to
    mention all that Daylight Savings&amp;nbsp;nonsense.&lt;/li&gt;
&lt;li&gt;[Click here for an addendum to this post that will take you through
    how to schedule the &lt;span class="caps"&gt;EC2&lt;/span&gt; instance and avoid having it run&amp;nbsp;24/7][]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[Click here for an addendum to this post that will take you through
  how to schedule the &lt;span class="caps"&gt;EC2&lt;/span&gt; instance and avoid having it run 24/7]: http://www.spencerboucher.com/ec2-apis/
    &amp;#8220;Scheduling tasks in the cloud with &lt;span class="caps"&gt;EC2&lt;/span&gt;&amp;nbsp;APIs&amp;#8221;&lt;/p&gt;</summary><category term="api"></category><category term="aws"></category><category term="cartoDB"></category><category term="cartography"></category><category term="cron"></category><category term="ec2"></category><category term="map"></category><category term="quantifiedSelf"></category></entry><entry><title>Kaggle(esque)</title><link href="http://justmytwospence.github.com/pelican/kaggle-esque.html" rel="alternate"></link><updated>2013-12-07T06:38:00+01:00</updated><author><name>justmytwospence</name></author><id>tag:justmytwospence.github.com/pelican,2013-12-07:kaggle-esque.html</id><summary type="html">&lt;p&gt;Our program hosted its own Kaggle-style competition
this quarter, featuring a âmysteryâ dataset with a binary target
variable. I was impressed by the reveal.js javascript library, so I put
together our final slides using it, both because its pretty, and as a
way to get some more practice with &lt;span class="caps"&gt;HTML&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt;, and javascript. On top of
that, I had to expand my knowledge of Git in order to publish it on
their GitHub Pages platform, so wins all around. Check out the work of
Team LoanShark
here:[hr]&lt;iframe src="http://justmytwospence.github.io/LoanSharks/slides/#/" width="100%" height="500"&gt;&lt;/p&gt;
&lt;p&gt;Your browser doesn&amp;#8217;t support iframes. Do yourself a favor and go
download a &lt;em&gt;real&lt;/em&gt;&amp;nbsp;browser&lt;/p&gt;
&lt;/iframe&gt;</summary><category term="javascript"></category><category term="reveal.js"></category></entry></feed>