<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>justmytwospence</title><link href="http://justmytwospence.github.com/pelican/" rel="alternate"></link><link href="http://justmytwospence.github.com/pelican/feeds/r.atom.xml" rel="self"></link><id>http://justmytwospence.github.com/pelican/</id><updated>2014-03-22T18:38:32+01:00</updated><entry><title>Stratified sampling in R</title><link href="http://justmytwospence.github.com/pelican/stratified-sampling-in-r.html" rel="alternate"></link><updated>2014-03-22T18:38:32+01:00</updated><author><name>Spencer Boucher</name></author><id>tag:justmytwospence.github.com/pelican,2014-03-22:stratified-sampling-in-r.html</id><summary type="html">&lt;p&gt;I was surprised to find that R doesn’t have a base function for stratified random sampling. There’s not even a well known package I could find that does this in a straight forward way. So heres my&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;It is essentially a wrapper for a ddply call that samples each subset and then combines them. If the size argument is less than 1, it will be interpreted as the percentage of each stratification subset that should be sampled. If the size argument is greater than 1, it will be interpreted as the number of observations to sample from each stratification&amp;nbsp;subset. &lt;/p&gt;
&lt;p&gt;Note that in the first case, a different number of observations will be taken from each subset depending on their total number of observations. In the second case however, an equal number of observations will be sampled from each subset, regardless of their total number of&amp;nbsp;observations.&lt;/p&gt;
&lt;p&gt;The .by argument is formulated the same way it is for any other ddply&amp;nbsp;call.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/justmytwospence/7937389.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Titanic: Getting Started With R</title><link href="http://justmytwospence.github.com/pelican/titanic-getting-started-with-r.html" rel="alternate"></link><updated>2014-01-11T22:05:00+01:00</updated><author><name>Spencer Boucher</name></author><id>tag:justmytwospence.github.com/pelican,2014-01-11:titanic-getting-started-with-r.html</id><summary type="html">&lt;p&gt;My friend and classmate &lt;a href="http://trevorstephens.com"&gt;Trevor Stephens&lt;/a&gt; has created some &lt;a href="http://trevorstephens.com/post/72916401642/titanic-getting-started-with-r"&gt;pretty stellar R tutorials&lt;/a&gt; that will take you to about halfway up the leaderboard of Kaggle&amp;#8217;s &lt;a href="http://www.kaggle.com/c/titanic-gettingStarted"&gt;Titanic: Machine Learning from Disaster&lt;/a&gt; competition. While the competition has a &lt;a href="http://www.kaggle.com/c/titanic-gettingStarted/details/getting-started-with-python"&gt;Python tutorial&lt;/a&gt; and even a beginner&amp;#8217;s &lt;a href="http://www.kaggle.com/c/titanic-gettingStarted/details/getting-started-with-excel"&gt;Excel tutorial&lt;/a&gt;, any R equivalent had been suspiciously lacking. This is the competition that served as our first foray into machine learning, so kudos to Trevor for giving back to the&amp;nbsp;community!&lt;/p&gt;
&lt;p&gt;w&lt;/p&gt;</summary><category term="kaggle"></category><category term="machine learning"></category><category term="R"></category></entry><entry><title>Luke attempts a novel analysis in SAS</title><link href="http://justmytwospence.github.com/pelican/luke-skywalker-attempts-a-novel-analysis-in-sas.html" rel="alternate"></link><updated>2014-01-06T22:17:00+01:00</updated><author><name>Spencer Boucher</name></author><id>tag:justmytwospence.github.com/pelican,2014-01-06:luke-skywalker-attempts-a-novel-analysis-in-sas.html</id><summary type="html"></summary><category term="SAS"></category><category term="R"></category></entry><entry><title>Luke Skywalker on SAS</title><link href="http://justmytwospence.github.com/pelican/luke-skywalker-on-sas.html" rel="alternate"></link><updated>2013-12-09T00:24:00+01:00</updated><author><name>Spencer Boucher</name></author><id>tag:justmytwospence.github.com/pelican,2013-12-09:luke-skywalker-on-sas.html</id><summary type="html"></summary><category term="SAS"></category><category term="R"></category></entry><entry><title>StepLively update</title><link href="http://justmytwospence.github.com/pelican/steplively-update.html" rel="alternate"></link><updated>2013-11-03T21:59:00+01:00</updated><author><name>Spencer Boucher</name></author><id>tag:justmytwospence.github.com/pelican,2013-11-03:steplively-update.html</id><summary type="html">&lt;p&gt;This week I got an email from RStudio letting me know that after a week or two of waiting, I’ve been assigned &lt;span class="caps"&gt;2GB&lt;/span&gt; of space on their servers for hosting Shiny apps. So now you can click on the above link to see the live version of my stepwise regression app that I posted last week. In celebration, I’ve added a few extras to the app, including the ability to upload your own data set, although its not a particularly robust feature&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;Update: I’ve recently moved to Rstudio’s next-gen hosting platform: shinyapps.io. This was necessary because I was having issues installing low-level packages like Rcpp onto their Spark server. This new platform is much more flexible in this regard. I’ve updated links&amp;nbsp;accordingly.&lt;/p&gt;</summary><category term="R"></category><category term="Shiny"></category><category term="stepwise"></category></entry><entry><title>Peeking into a black box</title><link href="http://justmytwospence.github.com/pelican/peeking-into-a-black-box.html" rel="alternate"></link><updated>2013-10-22T23:59:00+02:00</updated><author><name>Spencer Boucher</name></author><id>tag:justmytwospence.github.com/pelican,2013-10-22:peeking-into-a-black-box.html</id><summary type="html">&lt;p&gt;I’ve been meaning to try my hand at Shiny for a while now, and I’ve finally gotten around to it. Shiny is an R package from the people who brought you RStudio that allows you to take R code and embed it within an interactive &lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;span class="caps"&gt;UI&lt;/span&gt; that uses Bootstrap styling. You can get surprising mileage out of R visualization when it magically animates (I would have named the package “pinocchio” but they didn’t ask me). &lt;a href="http://www.rstudio.com/shiny/showcase/"&gt;Check out the Shiny showcase if you don’t believe&amp;nbsp;me.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My original idea to get my feet wet was a real-time visualization of least-angle regression, because I’m fascinated by how it turns a discrete algorithm like step-wise regression into an analogue algorithm (or at least an approximation of one). I think it would be neat to watch this analogue “dialing in” of regression&amp;nbsp;coefficients.&lt;/p&gt;
&lt;p&gt;Making that happen would require ripping apart the code in the &lt;span class="caps"&gt;LARS&lt;/span&gt; package. I wasn’t feeling quite that ambitious considering a few other looming assignments, but the fact that its even an option for me to explore in the future is one of the beautiful features of an open source language like R. Ultimately I settled on visualizing a plain vanilla forward stepwise regression, because I had a home-brew implementation lying around from a previous&amp;nbsp;assignment.&lt;/p&gt;
&lt;p&gt;Without further ado, here’s a preview in .gif format:[hr]&lt;img alt="" src="http://media.tumblr.com/66066fffc66745aa8b9047b5e49032d3/tumblr_inline_mv3h49xMTG1r0kwho.gif" /&gt;[hr]You can run the actual app for yourself in your R console with only three lines of code (two if you already have shiny&amp;nbsp;installed!) &lt;/p&gt;
&lt;p&gt;​1. install.packages(‘shiny’)
2. library(shiny)
3. runGitHub(‘shiny_stepwise’,&amp;nbsp;‘justmytwospence’)&lt;/p&gt;
&lt;p&gt;The ability to run anyone’s shiny app straight from their GitHub profile is super cool. You can see the source code on my GitHub as well. Once I hear back from the RStudio folks about getting in on the beta version of their web hosting service, I can try to make it available to people who don’t have R installed (but really, will anyone who cares about stepwise regression &lt;em&gt;not&lt;/em&gt; have R&amp;nbsp;installed?).&lt;/p&gt;
&lt;p&gt;I think its actually a pretty cool glimpse into an algorithm that is (justifiably) distrusted by many for being too opaque. I’ll continue adding functionality and hopefully it will useful for someone other than myself in the not too distant future; either as a simple learning demonstration or maybe even in an actual modeling context. I will definitely be making more Shiny apps in the future as I become more familiar with its advanced features. Building dashboards, as I am discovering, can be quite&amp;nbsp;addicting.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;EDIT&lt;/span&gt;: The app is now live! See it at &lt;a href="http://steplively.spencerboucher.com"&gt;http://justmytwospence.shinyapps.io/StepLively/&lt;/a&gt;&lt;/p&gt;</summary><category term="R"></category><category term="Shiny"></category><category term="stepwise"></category></entry><entry><title>Switching R versions on-the-fly</title><link href="http://justmytwospence.github.com/pelican/switching-r-versions-on-the-fly.html" rel="alternate"></link><updated>2013-10-22T22:01:00+02:00</updated><author><name>Spencer Boucher</name></author><id>tag:justmytwospence.github.com/pelican,2013-10-22:switching-r-versions-on-the-fly.html</id><summary type="html">&lt;p&gt;If you need to switch back to an older version of R to use a particular package, it doesn’t get easier than downloading the &lt;a href="http://r.research.att.com/"&gt;RSwitcher utility from &lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use homebrew to keep my main installation up-to-date, and then switching back to 2.7 when I need a certain package is as easy as one&amp;nbsp;click.&lt;/p&gt;</summary><category term="R"></category></entry></feed>