<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>justmytwospence</title><link href="http://justmytwospence.github.com/pelican/" rel="alternate"></link><link href="http://justmytwospence.github.com/pelican/feeds/nix-web-usersspencerboucherpelicancontentec2-apisrst5-warning2-inline-emphasis-start-string-without-end-string.atom.xml" rel="self"></link><id>http://justmytwospence.github.com/pelican/</id><updated>2014-01-12T17:53:00+01:00</updated><entry><title>Scheduling tasks in the cloud with EC2Â APIs</title><link href="http://justmytwospence.github.com/pelican/ec2-apis.html" rel="alternate"></link><updated>2014-01-12T17:53:00+01:00</updated><author><name>justmytwospence</name></author><id>tag:justmytwospence.github.com/pelican,2014-01-12:ec2-apis.html</id><summary type="html">&lt;p&gt;[dropcap]T[/dropcap]his post is sort of an addendum to our &lt;a class="reference external" href="http://www.spencerboucher.com/live-mapping/"&gt;live-mapping
project&lt;/a&gt;, but it should also be of use to anyone looking to run an
arbitrary script on a recurring schedule. Originally, we set up a 24/7
instance on &lt;a class="reference external" href="http://aws.amazon.com/ec2/"&gt;Amazon&amp;#8217;s Elastic Compute Cloud&lt;/a&gt; that ran a daily &lt;tt class="docutils literal"&gt;cron&lt;/tt&gt;
job. This works, but its a bit wasteful because we&amp;#8217;re paying for 24
hours of cloud even though we&amp;#8217;re only actually using it for maybe 5
minutes a&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;Fortunately, Amazon provides a &lt;a class="reference external" href="http://aws.amazon.com/developertools/"&gt;schmorgesborg&lt;/a&gt; of command line
interface (&lt;span class="caps"&gt;CLI&lt;/span&gt;) tools that allow us to manage our cloud instances more
efficiently. Specifically, we want to schedule an instance to spin up
only once a day, execute our script, then shut back down. To accomplish
this, we will want three &lt;span class="caps"&gt;CLI&lt;/span&gt; tools: &lt;a class="reference external" href="http://aws.amazon.com/developertools/368"&gt;the Amazon &lt;span class="caps"&gt;EC2&lt;/span&gt; &lt;span class="caps"&gt;AMI&lt;/span&gt; Tools&lt;/a&gt;, &lt;a class="reference external" href="http://aws.amazon.com/developertools/351"&gt;the
Amazon &lt;span class="caps"&gt;EC2&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; Tools&lt;/a&gt;,and &lt;a class="reference external" href="http://aws.amazon.com/developertools/2535"&gt;the Auto Scaling Command Line Tool&lt;/a&gt;. If
you&amp;#8217;re on a Mac, it&amp;#8217;s way easier to get these with &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; than by
downloading from Amazon&amp;#8217;s&amp;nbsp;website:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;26)&lt;/p&gt;
&lt;p&gt;Cannot analyze code. No Pygments lexer found for&amp;nbsp;&amp;quot;line-height:20&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code:: line-height:20

    brew install ec2-ami-tools # For creating an AMI from an existing machine
    brew install ec2-api-tools # For registering and launching instances
    brew install aws-as        # For creating auto scaling groups / defining schedules

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As an extra Homebrew bonus, running &amp;#8220; brew info ec2-ami-tools&amp;#8220;,
&lt;tt class="docutils literal"&gt;brew info &lt;span class="pre"&gt;ec2-api-tools&lt;/span&gt;&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;brew info &lt;span class="pre"&gt;aws-as&lt;/span&gt;&lt;/tt&gt; will now tell us
exactly what we need to do to get our authentication and environment
variables all set up. First we are told to download the necessary .pem
files from &lt;a class="reference external" href="http://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key"&gt;this Amazon page&lt;/a&gt; and place them into a new hidden
directory of our home directory &amp;quot;~/.ec2&amp;quot;. Then we tell our command line
where everything lives now by inserting the following lines into our&amp;nbsp;~/.bashrc:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;41)&lt;/p&gt;
&lt;p&gt;Cannot analyze code. No Pygments lexer found for&amp;nbsp;&amp;quot;line-height:20&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code:: line-height:20

    export EC2_PRIVATE_KEY=&amp;quot;$(/bin/ls &amp;quot;$HOME&amp;quot;/.ec2/pk-*.pem | /usr/bin/head -1)&amp;quot;
    export EC2_CERT=&amp;quot;$(/bin/ls &amp;quot;$HOME&amp;quot;/.ec2/cert-*.pem | /usr/bin/head -1)&amp;quot;
    export EC2_HOME=&amp;quot;/usr/local/Cellar/ec2-api-tools/1.6.12.0/libexec&amp;quot;
    export AWS_AUTO_SCALING_HOME=&amp;quot;/usr/local/Cellar/auto-scaling/1.0.61.4/libexec&amp;quot;
    export EC2_AMITOOL_HOME=&amp;quot;/usr/local/Cellar/ec2-ami-tools/1.4.0.9/libexec&amp;quot;
    export EC2_REGION=&amp;quot;us-west-2&amp;quot;
    export EC2_ZONE=${EC2_REGION}a
    export EC2_URL=https://$EC2_REGION.ec2.amazonaws.com
    export AWS_AUTO_SCALING_URL=https://autoscaling.$EC2_REGION.amazonaws.com

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Its pretty simple, but if you have any trouble with this part, refer to
the official &lt;a class="reference external" href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html"&gt;Amazon documentation for setting up the command line&lt;/a&gt;.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;[column size=&amp;quot;one-half&amp;quot;]&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Because these environment variables are recognized out of the box by&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;57)&lt;/p&gt;
Line block ends without a blank line.&lt;/div&gt;
&lt;p&gt;the &lt;span class="caps"&gt;CLI&lt;/span&gt; tools, we won&amp;#8217;t need to point to our authentication keys or
specify a region every time we make an &lt;span class="caps"&gt;API&lt;/span&gt; call and our next commands
will be much more succinct. Note that every &lt;span class="caps"&gt;EC2&lt;/span&gt; instance is physically
located at one of several regions; we are using us-west-2 because it
happens to be where I spun up the existing instance that currently holds
our &amp;quot;update.py&amp;quot; script, but any of them would probably work just fine
for the simple job at hand.
|&amp;nbsp;[/column]&lt;/p&gt;
&lt;p&gt;[column size=&amp;quot;one-half&amp;quot;&amp;nbsp;last=&amp;quot;true&amp;quot;]&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="31%" /&gt;
&lt;col width="69%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Code&lt;/th&gt;
&lt;th class="head"&gt;Region&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;ap-northeast-1&lt;/td&gt;
&lt;td&gt;Asia Pacific (Tokyo) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ap-southeast-1&lt;/td&gt;
&lt;td&gt;Asia Pacific (Singapore) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ap-southeast-2&lt;/td&gt;
&lt;td&gt;Asia Pacific (Sydney) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;eu-west-1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;EU&lt;/span&gt; (Ireland) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;sa-east-1&lt;/td&gt;
&lt;td&gt;South America (Sao Paulo) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;us-east-1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;US&lt;/span&gt; East (Northern Virginia) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;us-west-1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;US&lt;/span&gt; West (Northern California) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;us-west-2&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;US&lt;/span&gt; West (Oregon) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;[/column]&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;[dropcap]1[/dropcap]So, first things first. We can&amp;#8217;t just spin up an
off-the-rack &lt;span class="caps"&gt;EC2&lt;/span&gt; instance every day, because we&amp;#8217;ll run into the same
problem that I originally had with my web host: the Python modules that
we need won&amp;#8217;t be installed. We &lt;em&gt;could&lt;/em&gt; write a script that would install
&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; plus all of the requisite Python modules and run it first thing
after we launch the instance, but there&amp;#8217;s a better&amp;nbsp;way:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;100)&lt;/p&gt;
&lt;p&gt;Cannot analyze code. No Pygments lexer found for&amp;nbsp;&amp;quot;line-height:30&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code:: line-height:30

    ec2-create-image i-8918e1be -n &amp;quot;Map Update Image&amp;quot;

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This command from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ec2-ami-tools&lt;/span&gt;&lt;/tt&gt; creates an &amp;quot;Amazon Machine Image&amp;quot; of
the instance that we previously had running and names it &amp;quot;Map Update
Image&amp;quot;. A new image &lt;span class="caps"&gt;ID&lt;/span&gt; will now print to your console, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ami-fcdfb9cc&lt;/span&gt;&lt;/tt&gt;
in my case. This is tantamount to cloning the instance, because we can
now reference the new image &lt;span class="caps"&gt;ID&lt;/span&gt; when we spin up new instances and all of
our modules, scripts, etc. will be there waiting for us. Note that I
removed the instance&amp;#8217;s &lt;tt class="docutils literal"&gt;cron&lt;/tt&gt; job &lt;em&gt;before&lt;/em&gt; creating the &lt;span class="caps"&gt;AMI&lt;/span&gt;, because
we&amp;#8217;ll now be handling the task scheduling from outside the instance, via
&lt;strong&gt;autoscaling&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;[dropcap]2[/dropcap]Next let&amp;#8217;s write a shell script that will execute
our Python map-updating script, shoot us a diagnostic email, then shut
down the instance that its running on. The idea here is that once a day
we&amp;#8217;re going to spin up an instance using our shiny new &lt;span class="caps"&gt;AMI&lt;/span&gt; and
immediately run this new script (let&amp;#8217;s call it &amp;quot;update.sh&amp;quot;) that will do
its business and then promptly commit seppuku and stop charging us
money. Eric Hammond has created a great template on &lt;a class="reference external" href="http://alestic.com/2011/11/ec2-schedule-instance"&gt;his blog&lt;/a&gt;, which
I&amp;#8217;ve modified below. Note the execution of our &lt;a class="reference external" href="http://www.spencerboucher.com/live-mapping/"&gt;familiar&lt;/a&gt; &amp;quot;update.py&amp;quot;
script highlighted on line 4, and the apoptosis command on line&amp;nbsp;46:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;126)&lt;/p&gt;
&lt;p&gt;Cannot analyze code. No Pygments lexer found for&amp;nbsp;&amp;quot;lang:sh&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code:: lang:sh

    #!/bin/bash -x
    exec &amp;gt; &amp;gt;(tee /var/log/user-data.log|logger -t user-data -s 2&amp;gt;/dev/console) 2&amp;gt;&amp;amp;1

    /usr/bin/python /home/ubuntu/update.py # Run the script

    EMAIL=spencer.g.boucher&amp;#64;gmail.com

    # Upgrade and install Postfix so we can send a sample email
    export DEBIAN_FRONTEND=noninteractive
    apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get install -y postfix

    # Get some information about the running instance
    instance_id=$(wget -qO- instance-data/latest/meta-data/instance-id)
    public_ip=$(wget -qO- instance-data/latest/meta-data/public-ipv4)
    zone=$(wget -qO- instance-data/latest/meta-data/placement/availability-zone)
    region=$(expr match $zone '\(.*\).')
    uptime=$(uptime)

    # Send status email
    /usr/sbin/sendmail -oi -t -f $EMAIL &amp;lt;&amp;lt;EOM
    From: $EMAIL
    To: $EMAIL
    Subject: Results of EC2 scheduled script

    This email message was generated on the following EC2 instance:

      instance id: $instance_id
      region:      $region
      public ip:   $public_ip
      uptime:      $uptime

    If the instance is still running, you can monitor the output of this
    job using a command like:

      ssh ubuntu&amp;#64;$public_ip tail -1000f /var/log/user-data.log

      ec2-describe-instances --region $region $instance_id

    EOM

    # Give the script and email some time to do their thing
    sleep 600 # 10 minutes

    # This will stop the EBS boot instance, stopping the hourly charges.
    # Have Auto Scaling terminate it, stopping the storage charges.
    shutdown -h now

    exit 0

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note that the user data script that we pass to the launch configuration
executes with root permissions, not as the user &amp;quot;ubuntu&amp;quot; that you would
typically log in as via &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt;. Its probably best to be as explicit as
possible when specifying path names in the cloud, the tilde operator
might turn around and bite&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;[dropcap]3[/dropcap]Now we need to create &lt;strong&gt;launch configuration&lt;/strong&gt; that
will basically do all the button-pushing that we would normally be doing
at the &lt;span class="caps"&gt;AWS&lt;/span&gt; console &lt;span class="caps"&gt;GUI&lt;/span&gt;. Here we&amp;nbsp;specify:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Micro&amp;quot; as our instance&amp;nbsp;type.&lt;/li&gt;
&lt;li&gt;Our shell script &amp;quot;update.sh&amp;quot; from step 2 as the &amp;quot;user-data-file&amp;quot;.
User data files are passed into the instance and executed immediately
when supplied in the launch configuration. They must be less than
16kb as I suppose they are stored on some ancillary server&amp;nbsp;somewhere.&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;AMI&lt;/span&gt; image that we cloned in step 1 from the instance that
included our Python&amp;nbsp;modules.&lt;/li&gt;
&lt;li&gt;The name of the launch config; let&amp;#8217;s call it&amp;nbsp;&amp;quot;map-update-launch-config&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;199)&lt;/p&gt;
&lt;p&gt;Cannot analyze code. No Pygments lexer found for&amp;nbsp;&amp;quot;line-height:20&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code:: line-height:20

    as-create-launch-config \
        --instance-type t1.micro \
        --user-data-file ~/Desktop/update.sh \
        --image-id ami-fcdfb9cc \
        --launch-config &amp;quot;map-update-launch-config&amp;quot;
    as-describe-launch-configs --headers

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note that the second line provides a list of all the launch
configurations that have been&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;[dropcap]4[/dropcap]We must also create an &lt;strong&gt;auto scaling group&lt;/strong&gt;. These
are typically used as a sort of container to which we can add/remove
instances on a schedule or in response to heavy traffic, but we can also
use it to schedule a single instance to flick on and off. We need to
tell&amp;nbsp;it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A name to assign the scaling group&amp;nbsp;(&amp;quot;map-update-scale-group&amp;quot;).&lt;/li&gt;
&lt;li&gt;The name of the launch configuration we created in step 3&amp;nbsp;(&amp;quot;map-update-launch-config&amp;quot;).&lt;/li&gt;
&lt;li&gt;Which availability zone we want to use (basically irrelevant; we set
our environment variable &lt;tt class="docutils literal"&gt;EC2_ZONE&lt;/tt&gt; to &amp;quot;a&amp;quot; earlier).
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ec2-describe-available-zones&lt;/span&gt;&lt;/tt&gt; provides a list of the available&amp;nbsp;zones&lt;/li&gt;
&lt;li&gt;A minimum and maximum number of instances in the group. We&amp;#8217;ll
initialize these to&amp;nbsp;zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;229)&lt;/p&gt;
&lt;p&gt;Cannot analyze code. No Pygments lexer found for&amp;nbsp;&amp;quot;line-height:20&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code:: line-height:20

    as-create-auto-scaling-group \
        --auto-scaling-group &amp;quot;map-update-scale-group&amp;quot; \
        --launch-configuration &amp;quot;map-update-launch-config&amp;quot; \
        --availability-zones &amp;quot;$EC2_ZONE&amp;quot; \
        --min-size 0 --max-size 0
    as-suspend-processes &amp;quot;map-update-scale-group&amp;quot; \
        --processes ReplaceUnhealthy
    as-describe-auto-scaling-groups --headers

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the second line, we are using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;as-suspend-processes&lt;/span&gt;&lt;/tt&gt; to prevent the
instance&amp;#8217;s default behavior which is to attempt to restart after it is
shut down. The third line provides a list of all the auto scaling groups
that have been&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;[dropcap]5[/dropcap]Last but not least, we are ready to assign a
schedule to our auto scaling group. Here we create two: one to start the
instance and one to terminate the instance. Astute readers will recall
that &amp;quot;update.sh&amp;quot; already stops the instance so that we aren&amp;#8217;t paying to
have it running, but we also need to completely terminate the instance
so that we aren&amp;#8217;t paying to store information about it. Each schedule&amp;nbsp;requires:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A name (&amp;quot;map-update-start&amp;quot; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;&amp;quot;map-update-stop&amp;quot;).&lt;/li&gt;
&lt;li&gt;The name of the auto scaling group we created in step 4&amp;nbsp;(&amp;quot;map-update-scale-group&amp;quot;).&lt;/li&gt;
&lt;li&gt;How we want to scale. By setting both &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;min-size&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;max-size&lt;/span&gt;&lt;/tt&gt;
to 1, we are effectively turning on one instance. We later
effectively turn that instance back off by setting both to&amp;nbsp;0.&lt;/li&gt;
&lt;li&gt;A &amp;quot;recurrence,&amp;quot; ie when to occur. This flag uses the same syntax that
&lt;tt class="docutils literal"&gt;cron&lt;/tt&gt; does. Here we set the instance to launch at midnight &lt;span class="caps"&gt;UTC&lt;/span&gt;
(&lt;tt class="docutils literal"&gt;0 0 * * *&lt;/tt&gt;), and terminate 15 minutes later (&lt;tt class="docutils literal"&gt;15 0 * * *&lt;/tt&gt;).
Recall that our script already stops the instance 10 minutes after
execution, so 15 minutes is playing it&amp;nbsp;safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: &lt;span class="caps"&gt;WARNING&lt;/span&gt;/2 (&lt;tt class="docutils"&gt;/Users/SpencerBoucher/pelican/content/ec2-apis.rst&lt;/tt&gt;, line&amp;nbsp;267)&lt;/p&gt;
&lt;p&gt;Cannot analyze code. No Pygments lexer found for&amp;nbsp;&amp;quot;line-height:20&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code:: line-height:20

    as-put-scheduled-update-group-action \
        --name &amp;quot;map-update-start&amp;quot; \
        --auto-scaling-group &amp;quot;map-update-scale-group&amp;quot; \
        --min-size 1 --max-size 1 \
        --recurrence &amp;quot;0 0 * * *&amp;quot;
    as-put-scheduled-update-group-action \
        --name &amp;quot;map-update-stop&amp;quot; \
        --auto-scaling-group &amp;quot;map-update-scale-group&amp;quot; \
        --min-size 0 --max-size 0 \
        --recurrence &amp;quot;15 0 * * *&amp;quot;
    as-describe-scheduled-actions --headers

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As before, the third line provides a list of the actions that have been&amp;nbsp;scheduled.&lt;/p&gt;
&lt;p&gt;[hr]&lt;/p&gt;
&lt;p&gt;And thats it! We are now only paying for 10 or 15 minutes of cloud per
day, as opposed to 1,440 of them. To review the timeline we have created
in this example: our auto scaling group boots up an instance up at
midnight &lt;span class="caps"&gt;UTC&lt;/span&gt; that immediately executes &amp;quot;update.sh&amp;quot;. This automatically
executes &amp;quot;update.py&amp;quot; and shoots us a diagnostic email. It then waits 10
minutes to make sure everything has time to run, before stopping the
instance. 5 minutes after that the auto scaling group then completely
terminates the&amp;nbsp;instance.&lt;/p&gt;
&lt;p&gt;Other great&amp;nbsp;resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/schedule_time.html"&gt;Official Amazon documentation for scheduling auto scaling&amp;nbsp;groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://alestic.com/2011/11/ec2-schedule-instance"&gt;Running &lt;span class="caps"&gt;EC2&lt;/span&gt; Instances on a Recurring Schedule with Auto&amp;nbsp;Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.robertsindall.co.uk/blog/how-to-use-amazons-auto-scaling-groups/"&gt;Summary of &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cardinalpath.com/autoscaling-your-website-with-amazon-web-services-part-2/"&gt;Auto Scaling Your Website with Amazon Web&amp;nbsp;Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="api"></category><category term="auto scaling"></category><category term="aws"></category><category term="cloud"></category><category term="cron"></category><category term="ec2"></category></entry></feed>